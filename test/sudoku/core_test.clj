(ns sudoku.core-test
  (:require [clojure.test :refer :all]
            [sudoku.core   :as core]))

(def example-bad
  [[0 1 5 3 6 0 0 0 0]
   [3 0 0 2 0 7 4 6 5]
   [0 0 0 0 0 0 2 1 0]
   [1 9 0 0 2 0 3 7 6]
   [8 3 0 9 1 0 5 0 4]
   [2 0 6 0 0 4 0 0 0]
   [0 0 3 0 5 1 9 0 7]
   [0 4 2 6 7 3 0 0 1]
   [0 0 0 0 9 8 6 0 2]])

(def moderate ; puzzle 120. 
  [[0 8 0 0 0 0 0 0 0]
   [0 4 7 8 0 9 0 0 1]
   [0 0 1 4 5 0 0 2 0]
   [8 1 6 7 0 0 5 0 0]
   [9 0 0 0 0 1 0 0 0]
   [0 0 0 5 6 0 0 0 0]
   [0 0 0 0 0 8 0 5 3]
   [0 0 0 0 0 0 0 8 0]
   [0 0 0 3 1 0 0 4 6]])

(def example
  [[3 0 1 6 0 0 7 0 0]
   [4 2 0 0 0 0 1 0 0]
   [0 6 0 0 5 2 0 9 0]
   [0 8 3 5 1 0 0 4 0]
   [0 0 0 0 0 0 3 6 0]
   [5 0 0 4 9 0 0 0 0]
   [0 0 0 0 2 0 0 0 0]
   [7 4 0 0 0 5 0 0 9]
   [0 0 0 0 0 7 0 0 0]])

(def hard
  [[0 1 5 0 0 0 0 0 0]
   [0 0 0 0 0 0 4 0 5]
   [0 0 0 0 0 0 2 0 0]
   [1 0 0 0 0 0 0 0 0]
   [8 0 0 0 0 0 5 0 4]
   [2 0 0 0 0 4 0 0 0]
   [0 0 0 0 5 0 0 0 7]
   [0 4 2 0 0 0 0 0 0]
   [0 0 0 0 0 0 0 0 2]])

(def c298
  [[3 1 0 0 0 2 0 9 5]
   [0 0 0 0 0 0 2 4 0]
   [0 0 0 0 8 6 0 3 0]
   [4 8 0 0 5 0 0 0 2]
   [7 3 0 0 2 0 4 0 0]
   [5 0 0 6 0 0 0 0 0]
   [6 0 0 0 0 0 0 0 0]
   [0 0 4 0 0 8 0 0 3]
   [0 0 9 0 0 5 0 2 0]])

(deftest a-test
  (testing "Deductive solution"
    (is (= [[6 8 2 1 3 7 4 9 5]
            [5 4 7 8 2 9 3 6 1]
            [3 9 1 4 5 6 7 2 8]
            [8 1 6 7 9 4 5 3 2]
            [9 3 5 2 8 1 6 7 4]
            [2 7 4 5 6 3 8 1 9]
            [4 2 9 6 7 8 1 5 3]
            [1 6 3 9 4 5 2 8 7]
            [7 5 8 3 1 2 9 4 6]]
           (core/solve (core/make-problem moderate))))
    (is (= [[3 1 8 4 7 2 6 9 5]
            [9 6 7 5 1 3 2 4 8]
            [2 4 5 9 8 6 7 3 1]
            [4 8 1 7 5 9 3 6 2]
            [7 3 6 8 2 1 4 5 9]
            [5 9 2 6 3 4 8 1 7]
            [6 2 3 1 9 7 5 8 4]
            [1 5 4 2 6 8 9 7 3]
            [8 7 9 3 4 5 1 2 6]]
           (core/solve (core/make-problem c298))))))

